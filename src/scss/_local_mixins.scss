@mixin generate-spacing($property, $prefix) {

  // Para cada tamaño en el mapa de espaciado
  @each $size, $value in $spacers {

    // Aplicar espaciado global sin media queries (para xs)
    #{$prefix}-#{$size} {
      #{$property}: $value;
    }

    // Generar media queries para cada breakpoint
    @each $breakpoint, $bp-value in $breakpoints {
      @media (min-width: $bp-value) {
        #{$prefix}-#{$breakpoint}-#{$size} {
          #{$property}: $value;
        }
      }
    }
  }
}

@mixin generate-spacing-directions($property, $prefix) {
  @include generate-spacing($property, $prefix); // Sin dirección específica

  // Direcciones individuales
  @include generate-spacing(#{$property}-top, $prefix + "-t");
  @include generate-spacing(#{$property}-bottom, $prefix + "-b");
  @include generate-spacing(#{$property}-left, $prefix + "-s");
  @include generate-spacing(#{$property}-right, $prefix + "-e");

  // Direcciones combinadas
  @include generate-spacing(#{$property}-left, $prefix + "-x");
  @include generate-spacing(#{$property}-right, $prefix + "-x");
  @include generate-spacing(#{$property}-top, $prefix + "-y");
  @include generate-spacing(#{$property}-bottom, $prefix + "-y");
}

@include generate-spacing-directions(margin, "m");
@include generate-spacing-directions(padding, "p");

// 6. Generar "gap" para grid y flexbox
@mixin generate-gap($property, $prefix) {
  @each $size, $value in $spacers {
    #{$prefix}-#{$size} {
      #{$property}: $value;
    }

    @each $breakpoint, $bp-value in $breakpoints {
      @media (min-width: $bp-value) {
        #{$prefix}-#{$breakpoint}-#{$size} {
          #{$property}: $value;
        }
      }
    }
  }
}

@include generate-gap(gap, "gap");
@include generate-gap(row-gap, "row-gap");
@include generate-gap(column-gap, "column-gap");

@mixin scroll {
  scrollbar-color: $scrollbar-thumb $scrollbar-track;

  &::-webkit-scrollbar {
    width: auto;
    height: auto;
  }

  &::-webkit-scrollbar-thumb {
    background-color: $scrollbar-thumb;
  }

  &::-webkit-scrollbar-track {
    background-color: $scrollbar-track;
  }
}

@mixin interactive($color) {
  background-color: $color !important;

  &:hover {
    background-color: lighten($color, $lighter) !important;
  }

  &:active {
    background-color: darken($color, $darker) !important;
  }
}

@mixin icon($url, $size: $icons-size) {
  display: inline-flex !important;
  width: $size;
  -webkit-mask: url(/assets/icons/#{$url}.svg) 0 0 / contain no-repeat,
  linear-gradient(#fff 0 0) !important;
  mask: url(/assets/icons/#{$url}.svg) 0 0 / contain no-repeat,
  linear-gradient(#fff 0 0) !important;
  -webkit-mask-composite: destination-in !important;
  mask-composite: intersect !important;
  background: currentColor !important;

  &::before {
    content: '';
    display: block !important;
    padding-top: 100% !important;
  }
}

@mixin iconsCollection($collection, $size: $icons-size) {
  @each $icon in $collection {
    .ico-#{$icon} {
      @include icon(#{$icon}, $size);
    }
  }
}


@mixin fasesButtons {
  @include color-mode(dark) {
    color: lighten($item-color, 10%);
    background-color: darken($item-color, 10%);
    cursor: pointer;

    &:disabled {
      cursor: default;
      background-color: darken($item-color, 20%);
    }

    &:focus {
      color: lighten($item-color, 15%);
    }

    @for $i from 1 through length($option-collection) {
      &.idN#{($i - 1)} {
        $color: nth($option-collection, $i);
        color: #000;
        background-color: darken($color, 10%);
      }
    }
  }

  @include color-mode(light) {
    color: darken($item-color, 10%);
    background-color: lighten($item-color, 10%);
    cursor: pointer;

    &:disabled {
      cursor: default;
      background-color: lighten($item-color, 20%);
    }

    &:focus {
      color: darken($item-color, 15%);
    }

    @for $i from 1 through length($option-collection) {
      &.idN#{($i - 1)} {
        $color: nth($option-collection, $i);
        color: #000;
        background-color: lighten($color, 10%);
      }
    }
  }
}

